unit unPesquisaEscolaController;

interface

uses DB, DBClient, StdCtrls, unEscolaModelo;

type
    TPesquisaEscolaController = class
  private
    FEscolaModelo: TEscolaModelo;
    procedure SetEscolaModelo(const Value: TEscolaModelo);

  public
    function DadosCDS: TClientDataSet;

    procedure AbrirConexaoClientDS;
    procedure FecharConexaoClientDS;
    procedure ConsultaOrdenada(AIndiceComboBox: Integer);
    procedure LimparFiltroClientDS;
    procedure CarregarTodosRegistrosClientDS;
    procedure CarregarFiltroClientDS;

    property EscolaModelo: TEscolaModelo read FEscolaModelo write SetEscolaModelo;
  end;

implementation


uses
  unDados;

function TPesquisaEscolaController.DadosCDS: TClientDataSet;
begin
  Result := fmdados.ClientDSEscola;
end;

procedure TPesquisaEscolaController.FecharConexaoClientDS;
begin
  EscolaModelo.FecharConexaoClientDS;
end;

procedure TPesquisaEscolaController.LimparFiltroClientDS;
begin
  EscolaModelo.LimparFiltroClientDS;
end;

procedure TPesquisaEscolaController.SetEscolaModelo(const Value: TEscolaModelo);
begin
  FEscolaModelo := Value;
end;
//Método para ordenação da lista de consulta por CÓDIGO, DESCRIÇÃO ou DATA DE CADASTRO
procedure TPesquisaEscolaController.AbrirConexaoClientDS;
begin
  EscolaModelo.AbrirConexaoClientDS;
end;

procedure TPesquisaEscolaController.CarregarFiltroClientDS;
begin
  EscolaModelo.CarregarFiltroClientDS;
end;

procedure TPesquisaEscolaController.CarregarTodosRegistrosClientDS;
begin
  EscolaModelo.CarregarTodosRegistrosClientDS;
end;

procedure TPesquisaEscolaController.ConsultaOrdenada(AIndiceComboBox: Integer);
begin
  EscolaModelo.ConsultaOrdenada(AIndiceComboBox);
end;

end.
